// Automatically generated by MockGen. DO NOT EDIT!
// Source: repository.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) RetrieveAllTokens() (error, []string) {
	ret := _m.ctrl.Call(_m, "RetrieveAllTokens")
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) RetrieveAllTokens() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetrieveAllTokens")
}

func (_m *MockRepository) AddToken(token string) {
	_m.ctrl.Call(_m, "AddToken", token)
}

func (_mr *_MockRepositoryRecorder) AddToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddToken", arg0)
}

func (_m *MockRepository) DeleteToken(token string) {
	_m.ctrl.Call(_m, "DeleteToken", token)
}

func (_mr *_MockRepositoryRecorder) DeleteToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteToken", arg0)
}

func (_m *MockRepository) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockRepositoryRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
